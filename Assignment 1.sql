CREATE DATABASE ASSIGNMENT;
USE ASSIGNMENT;

/*----------------QUESTION 1-------------------*/
CREATE TABLE EMPLOYEES(
EMP_ID INT NOT NULL PRIMARY KEY,
EMP_NAME VARCHAR(20) NOT NULL,
AGE INT CHECK(AGE >= 18),
EMAIL VARCHAR(20) UNIQUE,
SALARY FLOAT default 30000);

/*----------------QUESTION 2-------------------*/

/* Constraints in a database are rules that ensure data accuracy, consistency, and integrity.
There are 6 types of constraints:
-> Primary key : The values should be unique and not null.
-> Foreign key : It refers to primary key in some other table.
-> Check : It ensures that the value meets a specific condition.
-> Not null : It ensures that the value should not be emplty.
-> Default : If the value is not entered, it ensures that there is some by default value.
-> Unique : It ensures that there is no duplicate values.*/

-- Example:
CREATE TABLE STUDENT(
ROLLNO INT PRIMARY KEY,
NAME VARCHAR(30) NOT NULL,
EMAIL VARCHAR(30) UNIQUE,
AGE INT CHECK (AGE>=18),
SALARY INT DEFAULT 0);

INSERT INTO STUDENT (ROLLNO,NAME,EMAIL,AGE) VALUES(1,"CHANDLER","CHNDLR@GMAIL.COM",21);
INSERT INTO STUDENT VALUES(2,"JOEY","JOEY@GMAIL.COM",29,350000);
INSERT INTO STUDENT (ROLLNO,NAME,EMAIL,AGE) VALUES(3,"ROSS","ROSSGELLER@GMAIL.COM",28);

SELECT * FROM STUDENT;

/*----------------QUESTION 3-------------------*/

/*The NOT NULL constraint is used in a column to make sure it always has a value and cannot be left empty.
A Primary Key cannot have NULL values because it is used to uniquely identify each row in a table.*/

/*----------------QUESTION 4-------------------*/

ALTER TABLE STUDENT
MODIFY EMAIL VARCHAR(20) NOT NULL;

ALTER TABLE STUDENT
DROP constraint EMAIL;

SELECT * FROM STUDENT;

/*----------------QUESTION 5-------------------*/
-- INSERT
INSERT INTO STUDENT (ROLLNO, NAME, EMAIL, AGE, SALARY) VALUES 
(3, NULL, "PWSKILLS@GMAIL.COM", 21, 5000);

--  UPDATE
UPDATE STUDENT  
SET NAME = NULL  
WHERE ROLLNO = 1;

-- DELETE
DELETE FROM STUDENT  
WHERE ROLLNO = 5; 

/*----------------QUESTION 6-------------------*/

CREATE TABLE products ( 
product_id INT PRIMARY KEY,
product_name VARCHAR(50),
price DECIMAL(10, 2) DEFAULT(50));

/*----------------QUESTION 7-------------------*/
CREATE TABLE STUDENTS(
STUDENT_ID INT PRIMARY KEY,
STUDENT_NAME VARCHAR(20),
CLASS_ID INT);

INSERT INTO STUDENTS VALUES
(1,"ALICE",101),
(2,"BOB",102),
(3,"CHARLIE",101);

SELECT * FROM STUDENTS;

CREATE TABLE CLASSES(
CLASS_ID INT,
CLASS_NAME VARCHAR(20));

INSERT INTO CLASSES VALUES
(101,"MATH"),
(102,"SCIENCE"),
(103,"HISTORY");

SELECT * FROM CLASSES;

SELECT STUDENTS.STUDENT_NAME, CLASSES.CLASS_NAME  
FROM STUDENTS  
INNER JOIN CLASSES  
ON STUDENTS.CLASS_ID = CLASSES.CLASS_ID;

/*----------------QUESTION 8-------------------*/
CREATE TABLE ORDERS(
ORDER_ID INT PRIMARY KEY,
ORDER_DATE DATE,
CUSTOMER_ID INT);

INSERT INTO ORDERS VALUES(1,"2024-01-01",101);
INSERT INTO ORDERS VALUES(2,"2024-01-03",102);

SELECT * FROM ORDERS;

CREATE TABLE CUSTOMERS(
CUSTOMER_ID INT PRIMARY KEY,
CUSTOMER_NAME VARCHAR(20));

INSERT INTO CUSTOMERS VALUES
(101,"ALICE"),
(102,"BOB");

SELECT * FROM CUSTOMERS;

CREATE TABLE PRODUCT(
PRODUCT_ID INT PRIMARY KEY,
PRODUCT_NAME VARCHAR(20),
ORDER_ID INT);

INSERT INTO PRODUCT VALUES(1,"LAPTOP",1);
INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME) VALUES(2,"PHONE");

SELECT * FROM PRODUCT;

SELECT O.ORDER_ID, C.CUSTOMER_NAME, P.PRODUCT_NAME
FROM PRODUCT AS P
LEFT JOIN ORDERS AS O 
ON P.ORDER_ID = O.ORDER_ID
LEFT JOIN CUSTOMERS AS C
ON O.CUSTOMER_ID = C.CUSTOMER_ID;

/*----------------QUESTION 9-------------------*/

CREATE TABLE SALES
(SALES_ID INT,
PRODUCT_ID INT,
AMOUNT INT);

INSERT INTO SALES VALUES
(1, 101, 500),
(2,102,300),
(3,101,700);

SELECT * FROM SALES;

CREATE TABLE PRODUCTS1
(PRODUCT_ID INT,
PRODUCT_NAME VARCHAR(20));

INSERT INTO PRODUCTS1 VALUES
(101,"LAPTOP"),
(102,"PHONE");

SELECT * FROM PRODUCTS1;

SELECT P.PRODUCT_NAME, SUM(AMOUNT) AS TOTAL_SALES
FROM SALES AS S
INNER JOIN
PRODUCTS1 AS P
ON S.PRODUCT_ID = P.PRODUCT_ID
GROUP BY P.PRODUCT_NAME;

/*----------------QUESTION 10-------------------*/

CREATE TABLE ORDERS1
(ORDER_ID INT,
ORDER_DATE DATE,
CUSTOMER_ID INT);

INSERT INTO ORDERS1 VALUES
(1, "2024-01-02",1),
(2, "2024-01-05",2);

SELECT * FROM ORDERS1;

CREATE TABLE CUSTOMERS1
(CUSTOMER_ID INT PRIMARY KEY,
CUSTOMER_NAME VARCHAR(20));

INSERT INTO CUSTOMERS1 VALUES
(1,"ALICE"),
(2,"BOB");

SELECT * FROM CUSTOMERS1;

CREATE TABLE ORDER_DETAILS
(ORDER_ID INT,
PRODUCT_ID INT,
QUANTITY INT);

INSERT INTO ORDER_DETAILS VALUES
(1,101,2),
(1,102,1),
(2,101,3);

SELECT * FROM ORDER_DETAILS;

SELECT O.ORDER_ID, C.CUSTOMER_NAME, SUM(OD.QUANTITY) AS TOTAL_QUANTITY
FROM ORDERS1 AS O
INNER JOIN
CUSTOMERS1 AS C
ON O.CUSTOMER_ID = C.CUSTOMER_ID
INNER JOIN 
ORDER_DETAILS AS OD
ON O.ORDER_ID = OD.ORDER_ID
GROUP BY O.ORDER_ID, C.CUSTOMER_NAME;
